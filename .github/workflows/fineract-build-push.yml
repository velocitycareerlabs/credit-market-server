name: Publish Packages and Images
on:
  workflow_dispatch:
  push:
    branches:
      - master
      - staging
      - dev
# TODO These jobs reuse the same first 7 steps. Replace with https://github.com/actions/runner/issues/438
# TODO Instead of suffixing with sha's should suffix with file hashes. In pseudo code we want to => determine all package/server hashes => set versions => filter out existent packages => publish all missing packages/servers
jobs:
  # Version Packages
  build-server-images:
    name: Build Server Images
    runs-on: ubuntu-latest
    outputs:
      fineract: ${{ env.fineract }}
    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2
      # Set Slug
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v2.x
      # Set Server Name
      - name: Set Server Name
        run: echo 'SERVER_NAME=fineract' >> $GITHUB_ENV
      # Set Common Variables
      - name: Set Common Variables
        run: bash ./eng/environments/common.sh
      # Set Dev Variables
      - name: Set Dev Variables
        run: bash ./eng/environments/dev.sh
        if: github.ref == 'refs/heads/dev'
      # Set Staging Variables
      - name: Set Staging Variables
        run: bash ./eng/environments/staging.sh
        if: github.ref == 'refs/heads/staging'
      # Set Prod Variables
      - name: Set Prod Variables
        run: bash ./eng/environments/prod.sh
        if: github.ref == 'refs/heads/master'
      # Create GitHub Container Tags
      - name: Create GitHub Container Tags
        run: |
          echo "GITHUB_MAIN_TAG=${{ env.TARGET_CONTAINER_REG }}/${{ env.CONTAINER_REPOSITORY_NAME }}:${{ env.CONTAINER_MAIN_TAG }}" >> $GITHUB_ENV
          echo "GITHUB_VER_TAG=${{ env.TARGET_CONTAINER_REG }}/${{ env.CONTAINER_REPOSITORY_NAME }}:${{ env.VER_NUM }}" >> $GITHUB_ENV
      # Login to GitHub Packages Container Registry
      - name: Login to GitHub Packages Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ env.TARGET_ORG }}
          password: ${{ secrets.VNF_GITHUB_TOKEN }}
          registry: ${{ env.TARGET_CONTAINER_REG }}
      # Build and Push to GitHub
      - name: Build and Push to GitHub
        id: github-build-stage
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.GITHUB_MAIN_TAG }}
            ${{ env.GITHUB_VER_TAG }}
          build-args: |
            FINERACT_SECURITY_AUTH0_DOMAIN=${{ env.FINERACT_SECURITY_AUTH0_DOMAIN }}
            FINERACT_SECURITY_AUTH0_ISSUER_URI=${{ env.FINERACT_SECURITY_AUTH0_ISSUER_URI }}
            FINERACT_SECURITY_AUTH0_AUDIENCE=${{ env.FINERACT_SECURITY_AUTH0_AUDIENCE }}
      - name: Image id as env
        run: echo "fineract=${{ steps.github-build-stage.outputs.digest }}" >> $GITHUB_ENV

  push-to-ecr:
    needs: build-server-images
    name: Push to ECR
    runs-on: ubuntu-latest
    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2
      # Set Slug
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v2.x
      # Set Server Name
      - name: Set Server Name
        run: echo 'SERVER_NAME=fineract' >> $GITHUB_ENV
      # Set Common Variables
      - name: Set Common Variables
        run: bash ./eng/environments/common.sh
      # Set Dev Variables
      - name: Set Dev Variables
        run: bash ./eng/environments/dev.sh
        if: github.ref == 'refs/heads/dev'
      # Set Staging Variables
      - name: Set Staging Variables
        run: bash ./eng/environments/staging.sh
        if: github.ref == 'refs/heads/staging'
      # Set Prod Variables
      - name: Set Prod Variables
        run: bash ./eng/environments/prod.sh
        if: github.ref == 'refs/heads/master'
      # Create GitHub Container Tags
      - name: Create GitHub Container Tags
        run: |
          echo "GITHUB_VER_TAG=${{ env.TARGET_CONTAINER_REG }}/${{ env.CONTAINER_REPOSITORY_NAME }}:${{ env.VER_NUM }}" >> $GITHUB_ENV
      # Login to GitHub Packages Container Registry
      - name: Login to GitHub Packages Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ env.TARGET_ORG }}
          password: ${{ secrets.VNF_GITHUB_TOKEN }}
          registry: ${{ env.TARGET_CONTAINER_REG }}
      # Pull from GitHub
      - name: Pull from GitHub
        run: docker pull $GITHUB_VER_TAG
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      # Create AWS Container Tags
      - name: Create GitHub Container Tags
        env:
            ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          echo "AWS_MAIN_TAG=${{ env.ECR_REGISTRY }}/${{ env.SERVER_NAME }}:${{ env.CONTAINER_MAIN_TAG }}" >> $GITHUB_ENV
          echo "AWS_VER_TAG=${{ env.ECR_REGISTRY }}/${{ env.SERVER_NAME }}:${{ env.VER_NUM }}" >> $GITHUB_ENV
      # Tag Image
      - name: Tag Image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          docker tag $GITHUB_VER_TAG $AWS_MAIN_TAG
          docker tag $GITHUB_VER_TAG $AWS_VER_TAG
      # Push to Amazon ECR
      - name: Push Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          docker push $AWS_MAIN_TAG
          docker push $AWS_VER_TAG

  update-tfenv-versions:
    needs:
      - build-server-images
      - push-to-ecr
    name: Update tfvars
    runs-on: ubuntu-latest
    env:
      fineract: ${{ needs.build-server-images.outputs.fineract }}
    steps:
      # Checkout monorepo repository
      #!!!! QUESTION. what GITHUB_TOKEN should be used?
      - name: Checkout Repository monorepo
        uses: actions/checkout@v3
        with:
           token: ${{ secrets.GITHUB_TOKEN }}
           repository: velocitycareerlabs/monorepo
           ref: ${{ github.ref }}
      # Checkout credit-marget-server Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
           path: credit-market-server
      # Set Slug
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      # Set Common Variables
      - name: Set Common Variables
        run: bash ./credit-market-server/eng/environments/common.sh
      # Set Dev Variables
      - name: Set Dev Variables
        run: bash ./credit-market-server/eng/environments/dev.sh
        if: github.ref == 'refs/heads/dev'
      # Set Staging Variables
      - name: Set Staging Variables
        run: bash ./credit-market-server/eng/environments/staging.sh
        if: github.ref == 'refs/heads/staging'
      # Cleaup Old PRs
      #!!!! QUESTION. is this step require?
      - name: Cleaup Old PRs
        run: |
          gh pr list --repo velocitycareerlabs/monorepo --json number --jq '.[] | .number' --label ${{ env.VER_PR_LABEL }} | \
          while read pr; do gh pr close $pr --repo velocitycareerlabs/monorepo --delete-branch; done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Update fineract image versions
      - name: Update fineract image versions
        run: bash ./eng/scripts/update-image-version.sh fineract
      # Create new branch and PR to origin branch
      #!!!! QUESTION. What branch prefix will be 'chore/image-ver' or another one?
      - name: Create new branch and PR to origin branch
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
           token: ${{ secrets.VNF_GITHUB_TOKEN }}
           branch: 'chore/image-ver-${{ env.VER_NUM }}'
           commit-message: 'chore/image-ver-${{ env.VER_NUM }}'
           delete-branch: true
           title: 'chore/image-ver-${{ env.VER_NUM }}'
           body: |
              Automated image version update PR
              - chore/image-ver-${{ env.VER_NUM }}
           labels: |
             ${{ env.VER_PR_LABEL }}
           draft: false
      # Autoapprove
      - name: Autoapprove
        run: gh pr review ${{ steps.cpr.outputs.pull-request-number }} --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # User cannot approve own PR
      # Automerge
      - name: Automerge
        run: |
          git checkout ${{ env.GITHUB_REF_NAME }}
          gh pr merge $PR_NUM --subject $SUBJECT --squash --delete-branch --auto
        env:
          PR_NUM: ${{ steps.cpr.outputs.pull-request-number }}
          SUBJECT: 'chore/image-ver-${{ env.VER_NUM }}'
          GITHUB_TOKEN: ${{ secrets.VNF_GITHUB_TOKEN }}